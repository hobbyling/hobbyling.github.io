<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode- Palinderome Number</title>
      <link href="/2022/04/15/leetcode-palinderomenumber/"/>
      <url>/2022/04/15/leetcode-palinderomenumber/</url>
      
        <content type="html"><![CDATA[<h2 id="herb-難度：Easy"><a href="#herb-難度：Easy" class="headerlink" title=" :herb: 難度：Easy "></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 難度：Easy </font></h2><hr><h2 id="herb-題目"><a href="#herb-題目" class="headerlink" title=" :herb: 題目 "></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 題目 </font></h2><p>給定一個整數 x，如果 x 是迴文數，則返回 true。</p><blockquote><p>Given an integer x, return true if x is palindrome integer.</p></blockquote><p>迴文數的定義為：從前面讀和從後面讀是一樣的，是一個「對稱」的數<br>例如，121 是一個迴文數，而 123 不是</p><blockquote><p>An integer is a palindrome when it reads the same backward as forward.<br>For example, 121 is a palindrome while 123 is not.</p></blockquote><p>限制：$-2^{31}$ &lt;= x &lt;= $2^{31}$ - 1</p><blockquote><p>Constraints: $-2^{31}$ &lt;= x &lt;= $2^{31}$ - 1</p></blockquote><p>更近一步：是否能在不將數字轉成字串的方式下解決問題呢？</p><blockquote><p>Follow up: Could you solve it without converting the integer to a string?</p></blockquote><pre class="line-numbers language-none"><code class="language-none">Example 1Input: x = 121Output: true解釋：從左邊往右邊讀，和從右邊往左邊讀，都是 121Explanation: 121 reads as 121 from left to right and from right to left.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Example 2Input: x = -121Output: false解釋：從左邊往右邊讀是 -121，從右邊往左邊讀是 121-，所以不是迴文數Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Example 3Input: x = 10Output: false解釋：從左邊往右邊讀是 10，從右邊往左邊讀是 01，所以不是迴文數Explanation: Reads 01 from right to left. Therefore it is not a palindrome.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="herb-初次解題"><a href="#herb-初次解題" class="headerlink" title=" :herb: 初次解題"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 初次解題</font></h2><ul><li>Runtime : 167 ms</li><li>Memory : 51.6 MB</li></ul><p>第一次解題時，沒有注意到不要轉換成字串的提示，就滿心歡喜地轉換並解出答案。<br>先將數字拆解成陣列後，再進行比較</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number} x * @return {boolean} */</span><span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 將字串分解成陣列</span>  <span class="token keyword">const</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果陣列第一個值是 '-'，則返回 false</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment">// 依序判斷前後值，若不相等，則返回 false</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> arr<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>轉換成字串的情況下，也可以直接反轉字串做比較</p><ul><li>Runtime : 195 ms</li><li>Memory : 51.6 MB</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number} x * @return {boolean} */</span><span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">==</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="herb-不使用字串"><a href="#herb-不使用字串" class="headerlink" title=" :herb: 不使用字串"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 不使用字串</font></h2><ul><li>Runtime : 904 ms</li><li>Memory : 57.8 MB</li></ul><p>了解其他進階解法，是用取餘數和整數的方式處理。</p><ul><li>%：回傳剩下的餘數，ex 15 % 10 = 5</li><li>Math.floor(): 回傳小於等於所給數字的最大整數，ex Math.floor(5.09) =&gt; 5</li></ul><p>先判斷數字：</p><ul><li>負數：一定不是迴文數</li><li>個位數：一定是迴文數</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number} x * @return {boolean} */</span><span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 若為負數，則返回 false</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 若為個位數，則返回 true</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 算出 x 是幾位數</span>  <span class="token keyword">let</span> digits <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> digits <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    digits <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 取第一個數字</span>    <span class="token keyword">let</span> first <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x <span class="token operator">/</span> digits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取最後一個數字</span>    <span class="token keyword">let</span> last <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!==</span> last<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 去除頭尾後繼續比對</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x:"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x % digits:"</span><span class="token punctuation">,</span> x <span class="token operator">%</span> digits<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"(x % digits) / 10:"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> digits<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>      <span class="token string">"Math.floor((x % digits) / 10))"</span><span class="token punctuation">,</span>      Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">%</span> digits<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">%</span> digits<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 因為比完頭尾所以少了兩位數 / 100</span>    digits <span class="token operator">=</span> digits <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>console.log 回傳結果測試</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token number">121</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">121</span>x <span class="token operator">%</span> digits<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">(</span>x <span class="token operator">%</span> digits<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token operator">:</span> <span class="token number">2.1</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">%</span> digits<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">2</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">2</span>x <span class="token operator">%</span> digits<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">(</span>x <span class="token operator">%</span> digits<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token operator">:</span> <span class="token number">0</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">%</span> digits<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">0</span><span class="token operator">--</span><span class="token operator">-</span><span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token number">123141</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">123141</span>x <span class="token operator">%</span> digits<span class="token operator">:</span> <span class="token number">23141</span><span class="token punctuation">(</span>x <span class="token operator">%</span> digits<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token operator">:</span> <span class="token number">2314.1</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">%</span> digits<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">2314</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="herb-參考資料"><a href="#herb-參考資料" class="headerlink" title=" :herb: 參考資料"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 參考資料</font></h2><ul><li><a href="https://leetcode.com/problems/palindrome-number/">LeetCode-Palindrome Number</a></li><li><a href="https://hannahpun.gitbook.io/leetcode-note/math/9-palindrome-number">LeetCode Note</a></li></ul><hr><p>cover: Photo by <a href="https://unsplash.com/@sarahdorweiler?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Sarah Dorweiler</a> on <a href="https://unsplash.com/s/photos/flower?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Number </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode - Two sum</title>
      <link href="/2022/04/03/leetcode-twosum/"/>
      <url>/2022/04/03/leetcode-twosum/</url>
      
        <content type="html"><![CDATA[<h2 id="herb-難度：Easy"><a href="#herb-難度：Easy" class="headerlink" title=" :herb: 難度：Easy "></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 難度：Easy </font></h2><hr><h2 id="herb-題目"><a href="#herb-題目" class="headerlink" title=" :herb: 題目 "></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 題目 </font></h2><p>給定一組擁有整數數字的陣列 (nums) 以及一個整數目標值 (target)，陣列中有兩個元素加起來會等於目標值 (target)，需將這兩個元素的索引值 (indices)，以陣列方式回傳</p><blockquote><p>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.</p></blockquote><p>相同的元素不能重複使用，如 Example 3 的第一個 3 不能重複使用</p><blockquote><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p></blockquote><p>回傳的陣列值順序可任意排序</p><blockquote><p>You can return the answer in any order.</p></blockquote><pre class="line-numbers language-none"><code class="language-none">Example 1Input: nums = [2,7,11,15], target = 9Output: [0,1]Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Example2Input: nums = [3,2,4], target = 6Output: [1,2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Example3Input: nums = [3,3], target = 6Output: [0,1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="herb-初次解題"><a href="#herb-初次解題" class="headerlink" title=" :herb: 初次解題"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 初次解題</font></h2><ul><li>Runtime : 7652 ms</li><li>Memory : 64.4 MB</li></ul><p>第一次解題，花了一個小時左右才完成。用了兩個 find，中間跑迴圈時會有點搞不清楚現在跑到哪個值。不斷地用 console 確認後才終於解答。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} nums * @param {number} target * @return {number[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 第一個索引值</span>  <span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token comment">// 第二個索引值</span>  <span class="token keyword">let</span> second <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  nums<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 將 nums 參考被到 temp</span>    <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 計算 target 和 item 的差異</span>    <span class="token keyword">let</span> diff <span class="token operator">=</span> target <span class="token operator">-</span> item<span class="token punctuation">;</span>    <span class="token comment">// 將 key 值寫入第一個索引值</span>    first <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token comment">// temp 陣列中，將當前元素值用 'x' 代替，避免重複使用元素</span>    temp<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 在 temp 裡尋找與 diff 相等的元素，並將索引值寫入 second</span>    temp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">j<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">===</span> diff<span class="token punctuation">)</span> <span class="token punctuation">{</span>        second <span class="token operator">=</span> index<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> second<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="herb-進階解法"><a href="#herb-進階解法" class="headerlink" title=" :herb: 進階解法"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 進階解法</font></h2><ul><li>Runtime : 77 ms</li><li>Memory : 42.4 MB</li></ul><p>了解其他進階解法，發現用物件 (object) 解題的方法。一開始不太理解，也是嘗試印出 console 驗證，才逐步了解其中的邏輯。</p><p>利用物件沒有對應 key 值會回傳 <font color="#FF0000"><strong>undefined</strong></font> 的特性，來判斷如果回傳 undefined，則將原本 nums 的元素當作 key，對應的索引值當作 value 寫入 map。在下一次的迴圈中再繼續判斷，直到有對應的 key 時才回傳陣列。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[]} nums * @param {number} target * @return {number[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> v <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"map:"</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"map[target - v]:"</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>target <span class="token operator">-</span> v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> v<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> v<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      map<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>console.log 回傳結果測試</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">nums</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token number">9</span><span class="token literal-property property">map</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> v<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token literal-property property">map</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">'2'</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> v<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">0</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token literal-property property">nums</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token number">6</span><span class="token literal-property property">map</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> v<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token literal-property property">map</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">'3'</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> v<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token literal-property property">map</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">'2'</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">'3'</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> v<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">1</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token literal-property property">nums</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token number">6</span><span class="token literal-property property">map</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> v<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token literal-property property">map</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">'3'</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> v<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="herb-參考資料"><a href="#herb-參考資料" class="headerlink" title=" :herb: 參考資料"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 參考資料</font></h2><ul><li><a href="https://leetcode.com/problemset/all/">LeetCode-Two sum</a></li><li><a href="https://skyyen999.gitbooks.io/-leetcode-with-javascript/content/questions/1md.html">LeetCode with Javascript</a></li></ul><hr><p>cover: Photo by <a href="https://unsplash.com/@twinsfisch?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Isabella and Zsa Fischer</a> on <a href="https://unsplash.com/s/photos/simple?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Array </tag>
            
            <tag> Object </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>取得物件的 key / value 值</title>
      <link href="/2022/03/24/javascript-objectkeyandvalue/"/>
      <url>/2022/03/24/javascript-objectkeyandvalue/</url>
      
        <content type="html"><![CDATA[<h2 id="herb-Object-keys"><a href="#herb-Object-keys" class="headerlink" title=" :herb: Object.keys()"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Object.keys()</font></h2><blockquote><p>將物件中的 key 值，排序並以陣列回傳</p></blockquote><ul><li>範例一</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* ======= result =======  ['a', 'b', 'c']=======================*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>範例二：排序</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">:</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token string">"e"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* ======= result =======  ['0', '1', '2', '3', '4']=======================*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="herb-Object-values"><a href="#herb-Object-values" class="headerlink" title=" :herb: Object.values()"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Object.values()</font></h2><blockquote><p>將物件中的 value 值，根據 key 值做排序並以陣列回傳</p></blockquote><ul><li>範例一</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* ======= result =======  [1, 2, 3]=======================*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>範例二：排序</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">:</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token string">"e"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* ======= result =======  ['b', 'a', 'c', 'e', 'd']=======================*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>範例三：填入字串，會將字串分割成陣列</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">"hobby"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* ======= result =======  ['h', 'o', 'b', 'b', 'y']=======================*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>範例三：填入 Boolean，會回傳空陣列</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> boo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>boo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* ======= result =======  []=======================*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="herb-Object-entries"><a href="#herb-Object-entries" class="headerlink" title=" :herb: Object.entries()"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Object.entries()</font></h2><blockquote><p>取得物件中的 key 和 value，根據 key 值做排序並以陣列回傳</p></blockquote><ul><li>範例一</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* ======= result ======= [   ['a', 1],  ['b', 2],  ['c', 3]]=======================*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>範例二：排序</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">:</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token string">"e"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* ======= result ======= [   ['0', 'b'],  ['1', 'a'],  ['2', 'c'],  ['3', 'e'],  ['4', 'd'] ]=======================*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="herb-皆不會迭代到繼承的-property"><a href="#herb-皆不會迭代到繼承的-property" class="headerlink" title=" :herb: 皆不會迭代到繼承的 property"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 皆不會迭代到繼承的 property</font></h2><blockquote><p>從別人那邊繼承過來的 property，在使用以上三種方法時，結果並不會被列出</p></blockquote><ul><li>width 和 height 並沒有被印出來</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> size <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> customSize <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>customSize<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>customSize<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Custom"</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>customSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> customSize<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* ======= result ======= color redname Custom=======================*/</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>customSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* ======= result ======= color redname Custom=======================*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="herb-參考資料"><a href="#herb-參考資料" class="headerlink" title=" :herb: 參考資料"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 參考資料</font></h2><ul><li><a href="https://titangene.github.io/article/javascript-object-keys-values-entries.html">JavaScript 之旅 (4)：Object.keys() &amp; Object.values() &amp; Object.entries()</a></li><li><a href="https://vimsky.com/zh-tw/examples/usage/javascript_library_object_values.html">JavaScript Object.values()用法及代碼示例</a></li></ul><hr><p>cover: Photo by Cristina Graf Adamoli on <a href="https://unsplash.com/photos/ELM74Lhmyfo">Unsplashn</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判斷物件裡是否含有特定屬性</title>
      <link href="/2022/03/20/javascript-objecthaskey/"/>
      <url>/2022/03/20/javascript-objecthaskey/</url>
      
        <content type="html"><![CDATA[<h2 id="herb-情境"><a href="#herb-情境" class="headerlink" title=" :herb: 情境"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 情境</font></h2><p>在進行前端專案時，常會遇到後端回傳的 API 資料內，少了某個 key 值，導致程式報錯，畫面無法渲染。</p><p>可能因為該 key 值內沒有值，所以後端索性不給了。看起來資料是簡潔了許多，但是真的是非常困擾……</p><p>例如： Object 內少了一個 key favorite，導致 <code>v-if="favorite"</code> 時會報錯</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">obj <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Hobby"</span><span class="token punctuation">,</span>  <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">"female"</span><span class="token punctuation">,</span>  <span class="token comment">// favorite: 'bubble-tea'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="herb-解法"><a href="#herb-解法" class="headerlink" title=" :herb: 解法"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 解法</font></h2><p>有兩種方式可以判斷物件內屬性，而其中的差別在於確認的<font color="#ee6e73"><strong>屬性深度</strong></font>不同</p><h3 id="方法一：-obj-hasOwnProperty"><a href="#方法一：-obj-hasOwnProperty" class="headerlink" title="方法一： obj.hasOwnProperty()"></a>方法一： obj.hasOwnProperty()</h3><blockquote><p>obj.hasOwnProperty(“key”)</p></blockquote><ul><li>key: 要判定的 key 值</li><li>obj: 物件</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"favorite"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"valueOf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false, valueOf 繼承自原型鏈結</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二-in-運算子"><a href="#方法二-in-運算子" class="headerlink" title="方法二: in 運算子"></a>方法二: in 運算子</h3><blockquote><p>“key” in obj</p></blockquote><ul><li>key: 要判定的 key 值</li><li>obj: 物件</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"favorite"</span> <span class="token keyword">in</span> obj<span class="token punctuation">;</span><span class="token comment">//true</span><span class="token string">"valueOf"</span> <span class="token keyword">in</span> obj<span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="herb-差異"><a href="#herb-差異" class="headerlink" title=" :herb: 差異"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 差異</font></h2><p>hasOwnProperty() 只會檢查物件本身是否包含該屬性，而 in 運算子則會繼續往物件原型鏈 (Prototype chain) 上檢查。</p><p>在網頁 console 測試兩者差異</p><p>先建立物件<br><img src="/./assets/Javascript-ObjectHasKey/01.jpg" alt="建立物件"></p><p>展開物件後，可以看到除了我們設定的參數，還有 Prototype<br><img src="/./assets/Javascript-ObjectHasKey/02.jpg" alt="展開物件"></p><p>使用 hasOwnProperty() 和 in 運算子 來觀察其中差異。</p><p>發現因為 Prototype 裡有 <code>valueOf</code>，所以 in 運算子回傳的結果是 true，而 hasOwnProperty() 因為不會檢查 Prototype，所以回傳 false。<br><img src="/./assets/Javascript-ObjectHasKey/03.jpg" alt="觀察差異"></p><hr><h2 id="herb-參考資料"><a href="#herb-參考資料" class="headerlink" title=" :herb: 參考資料"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 參考資料</font></h2><ul><li><a href="https://stackoverflow.com/questions/455338/how-do-i-check-if-an-object-has-a-key-in-javascript">How do I check if an object has a key in JavaScript? - Stack Overflow</a></li><li><a href="https://www.jstips.co/zh_tw/javascript/check-if-a-property-is-in-a-object/">檢查屬性是否存在物件內</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">繼承與原型鏈 - JavaScript | MDN</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10190962">重新認識 JavaScript: Day 04 物件、陣列以及型別判斷 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天</a></li></ul><hr><p>cover: Photo by David van Dijk on <a href="https://unsplash.com/photos/3LTht2nxd34">Unsplashn</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作品集 - GoldenF 官方網站</title>
      <link href="/2022/03/16/portfolio-goldenfofficialwebsite/"/>
      <url>/2022/03/16/portfolio-goldenfofficialwebsite/</url>
      
        <content type="html"><![CDATA[<h2 id="herb-官網連結"><a href="#herb-官網連結" class="headerlink" title=":herb: 官網連結"></a><font color="#ee6e73"><span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 官網連結</font></h2><ul><li><a href="http://goldenf.co/">GoldenF 官方網站</a></li></ul><hr><h2 id="herb-專案簡介"><a href="#herb-專案簡介" class="headerlink" title=":herb: 專案簡介"></a><font color="#ee6e73"><span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 專案簡介</font></h2><p>這個專案是我進公司後第一個負責的專案，也是公司的第一個官方網站，主要訴求是可以讓業務在外向客戶展示產品以及服務項目</p><hr><h2 id="herb-功能簡介"><a href="#herb-功能簡介" class="headerlink" title=" :herb: 功能簡介"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 功能簡介</font></h2><h5 id="RWD-響應式設計"><a href="#RWD-響應式設計" class="headerlink" title="RWD 響應式設計"></a>RWD 響應式設計</h5><ul><li>因應使用者在外展示時，使用裝置多以手機為主，因此實作 RWD 以完善手機 UI 的呈現</li></ul><h5 id="寄信功能"><a href="#寄信功能" class="headerlink" title="寄信功能"></a>寄信功能</h5><ul><li>聯絡我：使用 PHP 實作 Email 寄信功能，並串接 google 機器人驗證，避免被惡意連續寄信攻擊</li></ul><h5 id="語系切換"><a href="#語系切換" class="headerlink" title="語系切換"></a>語系切換</h5><ul><li>可切換簡體中文、繁體中文及英文語系</li></ul><h5 id="API-串接"><a href="#API-串接" class="headerlink" title="API 串接"></a>API 串接</h5><ul><li>試玩遊戲部分與後端配合，串接 API 資料並於 UI 呈現</li></ul><hr><h2 id="herb-框架與套件"><a href="#herb-框架與套件" class="headerlink" title=" :herb: 框架與套件"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 框架與套件</font></h2><h5 id="JavaScript-框架"><a href="#JavaScript-框架" class="headerlink" title="JavaScript 框架"></a>JavaScript 框架</h5><ul><li>Vue2</li></ul><h5 id="CSS-框架"><a href="#CSS-框架" class="headerlink" title="CSS 框架"></a>CSS 框架</h5><ul><li>Bootstrap</li></ul><h5 id="套件"><a href="#套件" class="headerlink" title="套件"></a>套件</h5><table><thead><tr><th>套件名稱</th><th>說明</th><th>參考文件</th></tr></thead><tbody><tr><td>node-sass</td><td>將.scss 檔案轉換成 css</td><td><a href="https://github.com/sass/node-sass">Github</a></td></tr><tr><td>vue-awesome-swiper</td><td>輪播圖效果</td><td><a href="https://github.com/surmon-china/vue-awesome-swiper">Github</a></td></tr><tr><td>vue-backtotop</td><td>滾動至頂部</td><td><a href="https://github.com/caiofsouza/vue-backtotop">Github</a></td></tr><tr><td>vue-recaptcha</td><td>Google 機器人驗證</td><td><a href="https://github.com/DanSnow/vue-recaptcha">Github</a></td></tr><tr><td>vue-typer</td><td>打字機效果</td><td><a href="https://github.com/cngu/vue-typer">Github</a></td></tr><tr><td>vue-wow</td><td>捲動動畫效果</td><td><a href="https://github.com/Estelle00/vue-wow">Github</a></td></tr><tr><td>vue-axios</td><td>非同步工具</td><td><a href="https://github.com/imcvampire/vue-axios">Github</a></td></tr><tr><td>vue-meta</td><td>Head 標籤管理</td><td><a href="https://vue-meta.nuxtjs.org/">官方網站</a></td></tr><tr><td>qs</td><td>增加安全性的查詢字串解析和序列化字串的庫</td><td><a href="https://github.com/ljharb/qs">Github</a></td></tr></tbody></table><hr><h2 id="herb-歷經重構"><a href="#herb-歷經重構" class="headerlink" title=" :herb: 歷經重構"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 歷經重構</font></h2><p>身為公司唯一的前端，在接收到任務時，只想著用最快、最熟悉的工具去完成專案。因此在實作此專案的第一版本時，使用的是單純的 HTML, Css 及 JavaScrip。</p><p>隨著前端框架的興起，嘗試瞭解並學習後，公司決定以 Vue 作為未來前端專案的主要框架。而為了方便專案管理，統一所有專案使用框架，因此對官網重構，將架構轉換為 Vue。</p><p>第一次使用 Vue 完成一個專案，一邊在網路上尋找教學一邊實作在專案中，遇到問題時也只能靠自己尋找答案，看到專案能夠正式上線，雖然過程中覺得辛苦，但這些都累積成了經驗，讓我在執行接下來的專案時，能夠更得心應手。</p><hr><h2 id="herb-UI-設計"><a href="#herb-UI-設計" class="headerlink" title=" :herb: UI 設計"></a><font color="#ee6e73"> <span class="github-emoji"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> UI 設計</font></h2><p>由於公司屬於新創階段，並沒有 UI 設計師的職位專門設計版面，因此從整體架構、 UI 版面、色系規劃，都是由一人主導並實作。</p><p>選擇 <font color="#EBC55D">#EBC55D</font> 作為主色，除了是呼應「Golden」，也意涵著與我們合作，將會帶來財富。</p><p>利用在 Sketch 繪製的 Mockup，與主管討論 UI 呈現及色彩規劃，在來回修正後，最終定案並進行實作。而隨著 Figma 興起，為了方便團隊共同編輯，則逐步把檔案轉放到 Figma 平台上。</p><p><a href="https://www.figma.com/file/svcaTP8OdJ9ProkS2O3kPc/GF_official_website?node-id=0:1"><img src="/./assets/Portfolio-GoldenFOfficialWebsite/cover.png"></a><br><a href="https://www.figma.com/file/svcaTP8OdJ9ProkS2O3kPc/GF_official_website?node-id=0:1">前往 Figma</a></p>]]></content>
      
      
      <categories>
          
          <category> Portfolio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Portfolio </tag>
            
            <tag> Vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陣列批次操作</title>
      <link href="/2022/03/15/javascript-arraybatchaction/"/>
      <url>/2022/03/15/javascript-arraybatchaction/</url>
      
        <content type="html"><![CDATA[<h2 id="Array-forEach"><a href="#Array-forEach" class="headerlink" title="Array.forEach()"></a>Array.forEach()</h2><blockquote><p>對每個元素執行動作</p></blockquote><p>將陣列元素一個一個抓出來，帶入函數執行。陣列元素如果是物件可變更，不會產生新陣列</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> books <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> <span class="token literal-property property">discount</span><span class="token operator">:</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> <span class="token literal-property property">discount</span><span class="token operator">:</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> <span class="token literal-property property">discount</span><span class="token operator">:</span> <span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">600</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>books<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">book</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  book<span class="token punctuation">.</span>total <span class="token operator">=</span> book<span class="token punctuation">.</span>discount <span class="token operator">*</span> book<span class="token punctuation">.</span>price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* ======= result ======= [  { discount: 0.9, price: 200, total: 180 },  { discount: 0.8, price: 100, total: 80},  { discount: 0.7, price: 600, total: 420},]=======================*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Array-map"><a href="#Array-map" class="headerlink" title="Array.map()"></a>Array.map()</h2><blockquote><p>執行結果存到新陣列</p></blockquote><p>將陣列元素一個一個抓出來，將執行結果存成另一個陣列</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>new_array <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num <span class="token operator">*</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* ======= result ======= [1,4,9,16,25]=======================*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Array-filter"><a href="#Array-filter" class="headerlink" title="Array.filter()"></a>Array.filter()</h2><blockquote><p>留下符合條件的元素</p></blockquote><p>根據函數回傳值（true/false），決定要不要把元素複製到新陣列</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>new_array <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> num <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* ======= result ======= 12345[4,5]=======================*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Array-find"><a href="#Array-find" class="headerlink" title="Array.find()"></a>Array.find()</h2><blockquote><p>找到第一個符合條件的元素</p></blockquote><p>根據函數回傳值（true/false），傳回第一個符合條件的元素（非陣列），不會遍尋所有值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">dnas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"ATC"</span><span class="token punctuation">,</span> <span class="token string">"AGC"</span><span class="token punctuation">,</span> <span class="token string">"TTG"</span><span class="token punctuation">,</span> <span class="token string">"AAA"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>find_tg <span class="token operator">=</span> dnas<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">dna</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dna<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> dna<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"TG"</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>find_tg<span class="token punctuation">,</span> <span class="token keyword">typeof</span> find_tg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* ======= result ======= ATCAGCTTGTTG, string=======================*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Array-some"><a href="#Array-some" class="headerlink" title="Array.some()"></a>Array.some()</h2><blockquote><p>判斷有元素符合條件</p></blockquote><p>其中有元素符合條件回傳 true，遇到符合條件的元素就會停止，不會遍尋所有值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>find_tg <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">dna</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dna<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> dna <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>find_tg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* ======= result ======= 126true=======================*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Array-every"><a href="#Array-every" class="headerlink" title="Array.every()"></a>Array.every()</h2><blockquote><p>判斷所有元素都符合條件</p></blockquote><p>每一個元素都符合條件回傳 true，遇到不符合條件的元素就會停止，不會遍尋所有值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>find_tg <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">dna</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dna<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> dna <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>find_tg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* ======= result ======= 1false=======================*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Array-sort"><a href="#Array-sort" class="headerlink" title="Array.sort()"></a>Array.sort()</h2><blockquote><p>根據大小排列陣列</p></blockquote><p>根據函數回傳值排列陣列</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* ======= result ======= [3, 4, 6, 9]=======================*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Array-reduce-函數-初始值"><a href="#Array-reduce-函數-初始值" class="headerlink" title="Array.reduce(函數, 初始值)"></a>Array.reduce(函數, 初始值)</h2><blockquote><p>根據規則縮減陣列</p></blockquote><p>根據取出每個值與暫存做運算，回傳結果<br>Eg. 把書籍價錢加到暫存裡 -&gt; 總價</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">books <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> total <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> total <span class="token operator">+</span> a<span class="token punctuation">.</span>price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* ======= result ======= 60=======================*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>Cover: Photo by Kelli Tungay on <a href="https://unsplash.com/photos/2LJ4rqK2qfU">Unsplash</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
